// Mocks generated by Mockito 5.0.8 from annotations
// in movieflutter/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as i7;

import 'package:dartz/dartz.dart' as i2;
import 'package:dartz/dartz.dart';
import 'package:domain/entities/movie.dart';
import 'package:domain/entities/movie_detail.dart';
import 'package:domain/repositories/movie_repository.dart' as i6;
import 'package:domain/util/failure.dart';
import 'package:mockito/mockito.dart' as i1;

class _FakeEither<L, R> extends i1.Fake implements i2.Either<L, R> {}

///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends i1.Mock implements i6.MovieRepository {
  MockMovieRepository() {
    i1.throwOnMissingStub(this);
  }

  @override
  Future<Either<Failure, List<Movie>>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
              returnValue: Future<Either<Failure, List<Movie>>>.value(
                  _FakeEither<Failure, List<Movie>>()))
          as Future<Either<Failure, List<Movie>>>);

  @override
  Future<Either<Failure, List<Movie>>> getWatchlistMovies() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistMovies, []),
              returnValue: Future<i2.Either<Failure, List<Movie>>>.value(
                  _FakeEither<Failure, List<Movie>>()))
          as Future<Either<Failure, List<Movie>>>);

  @override
  Future<bool> isAddedToWatchlist(int id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlist, [id]),
          returnValue: Future<bool>.value(false)) as i7.Future<bool>);

  @override
  Future<Either<Failure, String>> removeWatchlist(MovieDetail movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
              returnValue: Future<i2.Either<Failure, String>>.value(
                  _FakeEither<Failure, String>()))
          as i7.Future<i2.Either<Failure, String>>);

  @override
  Future<Either<Failure, String>> saveWatchlist(MovieDetail movie) =>
      (super.noSuchMethod(Invocation.method(#saveWatchlist, [movie]),
              returnValue: Future<i2.Either<Failure, String>>.value(
                  _FakeEither<Failure, String>()))
          as i7.Future<i2.Either<Failure, String>>);

  @override
  Future<Either<Failure, List<Movie>>> searchMovies(String query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
              returnValue: Future<i2.Either<Failure, List<Movie>>>.value(
                  _FakeEither<Failure, List<Movie>>()))
          as Future<Either<Failure, List<Movie>>>);

  @override
  Future<Either<Failure, List<Movie>>> getMovieRecommendations(int id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
              returnValue: Future<i2.Either<Failure, List<Movie>>>.value(
                  _FakeEither<Failure, List<Movie>>()))
          as Future<Either<Failure, List<Movie>>>);

  @override
  Future<Either<Failure, MovieDetail>> getMovieDetail(int id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
              returnValue: Future<i2.Either<Failure, MovieDetail>>.value(
                  _FakeEither<Failure, MovieDetail>()))
          as i7.Future<i2.Either<Failure, MovieDetail>>);

  @override
  Future<Either<Failure, List<Movie>>> getTopRatedMovies() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedMovies, []),
              returnValue: Future<i2.Either<Failure, List<Movie>>>.value(
                  _FakeEither<Failure, List<Movie>>()))
          as Future<Either<Failure, List<Movie>>>);

  @override
  Future<Either<Failure, List<Movie>>> getPopularMovies() =>
      (super.noSuchMethod(Invocation.method(#getPopularMovies, []),
              returnValue: Future<i2.Either<Failure, List<Movie>>>.value(
                  _FakeEither<Failure, List<Movie>>()))
          as Future<Either<Failure, List<Movie>>>);
}
