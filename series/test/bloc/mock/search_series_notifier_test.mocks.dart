// Mocks generated by Mockito 5.0.8 from annotations
// in movieflutter/test/presentation/provider/watchlist_movie_notifier_test.dart.
// Do not manually edit this file.

import 'dart:async' as i4;

import 'package:dartz/dartz.dart' as i2;
import 'package:mockito/mockito.dart' as i1;
import 'package:domain/util/failure.dart' as i5;
import 'package:domain/entities/series/series.dart' as i6;
import 'package:domain/repositories/series_repository.dart' as i7;
import 'package:domain/usecases/series/search_series.dart' as i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
class _FakeSeriesRepository extends i1.Fake implements i7.SeriesRepository {}

class _FakeEither<L, R> extends i1.Fake implements i2.Either<L, R> {}

/// A class which mocks [GetWatchlistMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchSeries extends i1.Mock implements i3.SearchSeries {
  MockSearchSeries() {
    i1.throwOnMissingStub(this);
  }

  @override
  i7.SeriesRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeSeriesRepository()) as i7.SeriesRepository);

  @override
  i4.Future<i2.Either<i5.Failure, List<i6.Series>>> execute(String? query) =>
      (super.noSuchMethod(Invocation.method(#execute, [query]),
              returnValue: Future<i2.Either<i5.Failure, List<i6.Series>>>.value(
                  _FakeEither<i5.Failure, List<i6.Series>>()))
          as i4.Future<i2.Either<i5.Failure, List<i6.Series>>>);
}
