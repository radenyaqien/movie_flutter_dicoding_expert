// Mocks generated by Mockito 5.0.8 from annotations
// in movieflutter/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as i7;
import 'dart:convert' as i18;
import 'dart:typed_data' as i19;

import 'package:common/data/datasources/db/database_helper.dart' as i15;
import 'package:common/data/datasources/movie_local_data_source.dart' as i13;
import 'package:common/data/datasources/movie_remote_data_source.dart' as i11;
import 'package:common/data/models/movie_detail_model.dart' as i3;
import 'package:common/data/models/movie_model.dart' as i12;
import 'package:common/data/models/movie_table.dart' as i14;
import 'package:common/data/models/series_table.dart';
import 'package:http/src/base_request.dart' as i20;
import 'package:http/src/client.dart' as i17;
import 'package:http/src/response.dart' as i4;
import 'package:http/src/streamed_response.dart' as i5;
import 'package:mockito/mockito.dart' as i1;
import 'package:sqflite_common/sqlite_api.dart' as i16;

class _FakeMovieDetailResponse extends i1.Fake
    implements i3.MovieDetailResponse {}

class _FakeResponse extends i1.Fake implements i4.Response {}

class _FakeStreamedResponse extends i1.Fake implements i5.StreamedResponse {}

/// A class which mocks [MovieRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRemoteDataSource extends i1.Mock
    implements i11.MovieRemoteDataSource {
  MockMovieRemoteDataSource() {
    i1.throwOnMissingStub(this);
  }

  @override
  i7.Future<List<i12.MovieModel>> getNowPlayingMovies() => (super.noSuchMethod(
          Invocation.method(#getNowPlayingMovies, []),
          returnValue: Future<List<i12.MovieModel>>.value(<i12.MovieModel>[]))
      as i7.Future<List<i12.MovieModel>>);

  @override
  i7.Future<List<i12.MovieModel>> getPopularMovies() => (super.noSuchMethod(
          Invocation.method(#getPopularMovies, []),
          returnValue: Future<List<i12.MovieModel>>.value(<i12.MovieModel>[]))
      as i7.Future<List<i12.MovieModel>>);

  @override
  i7.Future<List<i12.MovieModel>> getTopRatedMovies() => (super.noSuchMethod(
          Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<List<i12.MovieModel>>.value(<i12.MovieModel>[]))
      as i7.Future<List<i12.MovieModel>>);

  @override
  i7.Future<i3.MovieDetailResponse> getMovieDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
              returnValue: Future<i3.MovieDetailResponse>.value(
                  _FakeMovieDetailResponse()))
          as i7.Future<i3.MovieDetailResponse>);

  @override
  i7.Future<List<i12.MovieModel>> getMovieRecommendations(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
              returnValue:
                  Future<List<i12.MovieModel>>.value(<i12.MovieModel>[]))
          as i7.Future<List<i12.MovieModel>>);

  @override
  i7.Future<List<i12.MovieModel>> searchMovies(String? query) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [query]),
              returnValue:
                  Future<List<i12.MovieModel>>.value(<i12.MovieModel>[]))
          as i7.Future<List<i12.MovieModel>>);
}

/// A class which mocks [MovieLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieLocalDataSource extends i1.Mock
    implements i13.MovieLocalDataSource {
  MockMovieLocalDataSource() {
    i1.throwOnMissingStub(this);
  }

  @override
  i7.Future<String> insertWatchlist(i14.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<String>.value('')) as i7.Future<String>);

  @override
  i7.Future<String> removeWatchlist(i14.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<String>.value('')) as i7.Future<String>);

  @override
  i7.Future<i14.MovieTable?> getMovieById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieById, [id]),
              returnValue: Future<i14.MovieTable?>.value())
          as i7.Future<i14.MovieTable?>);

  @override
  i7.Future<List<i14.MovieTable>> getWatchlistMovies() => (super.noSuchMethod(
          Invocation.method(#getWatchlistMovies, []),
          returnValue: Future<List<i14.MovieTable>>.value(<i14.MovieTable>[]))
      as i7.Future<List<i14.MovieTable>>);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends i1.Mock implements i15.DatabaseHelper {
  MockDatabaseHelper() {
    i1.throwOnMissingStub(this);
  }

  @override
  i7.Future<i16.Database?> get database => (super.noSuchMethod(
      Invocation.getter(#database),
      returnValue: Future<i16.Database?>.value()) as i7.Future<i16.Database?>);

  @override
  i7.Future<int> insertWatchlist(i14.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as i7.Future<int>);

  @override
  i7.Future<int> removeWatchlist(i14.MovieTable? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
          returnValue: Future<int>.value(0)) as i7.Future<int>);

  @override
  i7.Future<Map<String, dynamic>?> getMovieById(int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieById, [id]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as i7.Future<Map<String, dynamic>?>);

  @override
  i7.Future<List<Map<String, dynamic>>> getWatchlistMovies() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistMovies, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as i7.Future<List<Map<String, dynamic>>>);

  @override
  i7.Future<List<Map<String, dynamic>>> getWatchlistTVShows() =>
      (super.noSuchMethod(Invocation.method(#getWatchlistTVShows, []),
              returnValue: Future<List<Map<String, dynamic>>>.value(
                  <Map<String, dynamic>>[]))
          as i7.Future<List<Map<String, dynamic>>>);

  @override
  i7.Future<int> insertWatchlistTV(SeriesTable tv) =>
      (super.noSuchMethod(Invocation.method(#insertWatchlistTV, [tv]),
          returnValue: Future<int>.value(0)) as i7.Future<int>);

  @override
  i7.Future<int> removeWatchlistTV(SeriesTable tv) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlistTV, [tv]),
          returnValue: Future<int>.value(0)) as i7.Future<int>);

  @override
  i7.Future<Map<String, dynamic>?> getSeriesById(int id) =>
      (super.noSuchMethod(Invocation.method(#getSeriesById, [id]),
              returnValue: Future<Map<String, dynamic>?>.value())
          as i7.Future<Map<String, dynamic>?>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends i1.Mock implements i17.Client {
  MockHttpClient() {
    i1.throwOnMissingStub(this);
  }

  @override
  i7.Future<i4.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<i4.Response>.value(_FakeResponse()))
          as i7.Future<i4.Response>);

  @override
  i7.Future<i4.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<i4.Response>.value(_FakeResponse()))
          as i7.Future<i4.Response>);

  @override
  i7.Future<i4.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          i18.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<i4.Response>.value(_FakeResponse()))
          as i7.Future<i4.Response>);

  @override
  i7.Future<i4.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          i18.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<i4.Response>.value(_FakeResponse()))
          as i7.Future<i4.Response>);

  @override
  i7.Future<i4.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          i18.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<i4.Response>.value(_FakeResponse()))
          as i7.Future<i4.Response>);

  @override
  i7.Future<i4.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          i18.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<i4.Response>.value(_FakeResponse()))
          as i7.Future<i4.Response>);

  @override
  i7.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as i7.Future<String>);

  @override
  i7.Future<i19.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<i19.Uint8List>.value(i19.Uint8List(0)))
          as i7.Future<i19.Uint8List>);

  @override
  i7.Future<i5.StreamedResponse> send(i20.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue:
                  Future<i5.StreamedResponse>.value(_FakeStreamedResponse()))
          as i7.Future<i5.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
